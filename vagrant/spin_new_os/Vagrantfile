# -*- mode: ruby -*-
# vi: set ft=ruby :
params = YAML.load_file 'config/vagrant.yml'
# base of ips that will be user
base_ip="192.168.56.10"
base_private_ip ="192.168.57.10"
# first ip to be used
first_ip=11
first_private_ip=11
ips = [ "#{base_ip}#{first_ip}" ]
ips_private= [" #{base_private_ip}#{first_private_ip}" ]
number_of_nodes=1

# create an array to store the list of ips

# build the list of ips for each node and gcomm address
# (1..number_of_nodes).each do |a|
#   ips.push("#{base_ip}#{first_ip}")
#   ips.push("#{base_private_ip}#{first_private_ip}")
#   first_ip += 1
#   first_private_ip +=1
# end
ssh_port=224
Vagrant.configure(2) do |config|
  (1..number_of_nodes).each do |i|
    config.vm.define "rac0#{i}" do |node|
      node.vm.box = "oraclebase/oracle-7"
      node.vm.host_name = "rac0#{i}"
      node.vm.network "private_network", ip:"#{base_ip}#{i}"
      node.vm.network "private_network", ip:"#{base_private_ip}#{i}" , virtualbox__intnet: "private"
      node.vm.synced_folder "config", "/vagrant_config"
      node.vm.synced_folder "shared_scripts", "/vagrant_scripts"
      node.vm.synced_folder "/Users/duyhanhnguyen/.ssh/", "/root/keys"
      #node.vm.synced_folder "software", "/vagrant_software"
      node.vm.network :forwarded_port, guest: 22, host: "#{ssh_port}#{i}", id: "ssh"
      # node.vm.network "forwarded_port", guest: 1521, host: 1522
      # node.vm.network "forwarded_port", guest: 5500, host: 5502

      node.vm.provider :virtualbox do |vb|
        if i == 1
          vb.customize ["modifyvm", :id, "--memory", "4096"]
          vb.customize ["modifyvm", :id, "--cpus", "4"]
        end
        if i == 2
          vb.customize ["modifyvm", :id, "--memory", "4096"]
          vb.customize ["modifyvm", :id, "--cpus", "2"]
        end
        if i == 3
          vb.customize ["modifyvm", :id, "--memory", "4096"]
          vb.customize ["modifyvm", :id, "--cpus", "2"]
        end
      end
      node.vm.provision "shell", inline: <<-SHELL
        sh /vagrant_scripts/provision.sh
      SHELL
    end
  end
end
